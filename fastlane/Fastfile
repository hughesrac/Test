default_platform :ios

platform :ios do
  before_all do
    ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "60"
    setup_circle_ci
  end

  desc "Runs all the tests"
  lane :test do
    
    lint
    scan(
      scheme: "Development",
      devices: ["iPhone 11"]
    )
    # in the meantime, build the app for PRs
    match(type: "development", readonly: true)
    gym(
      scheme: "Development",
      skip_archive: true,
    )
  end

  desc "Run swiftlint"
  lane :lint do
    sh("brew install swiftlint")
    swiftlint(
      mode: :lint,      # SwiftLint mode: :lint (default) or :autocorrect
      ignore_exit_status: true    # Allow fastlane to continue even if SwiftLint returns a non-zero exit status
    )
  end

  desc "Ad-hoc build"
  lane :adhoc do
    
    match(type: "adhoc", readonly: true)

    increment_build_number(
      build_number: ENV['CIRCLE_BUILD_NUM'],
    )

    gym(export_method: "ad-hoc",
        scheme: "AdHoc",
    )
  end

  desc "AppStore build and upload to TestFlight"
  lane :buildanddeploytotestflight do
    
    app_store_connect_api_key(
      key_id: "#{ENV["APP_STORE_KEY_ID"]}",
      issuer_id: "#{ENV["APP_STORE_ISSUER_ID"]}",
      key_content: "#{ENV["APP_STORE_KEY_BASE64"]}",
      is_key_content_base64: true,
      in_house: false,
    )
    
    match(type: "appstore", readonly: true)

    increment_build_number(
      build_number: ENV['CIRCLE_BUILD_NUM'],
    )

     if ENV["MIXPANEL_TOKEN_STAGING"]
       set_info_plist_value(path: "./Vocable/Supporting Files/Info.plist", key: "MIXPANEL_TOKEN_STAGING", value: ENV["MIXPANEL_TOKEN_STAGING"])
     end 

     if ENV["MIXPANEL_TOKEN_PRODUCTION"]
       set_info_plist_value(path: "./Vocable/Supporting Files/Info.plist", key: "MIXPANEL_TOKEN_PRODUCTION", value: ENV["MIXPANEL_TOKEN_PRODUCTION"])
     end 
    
     build_app(scheme: "AppStore")

     upload_to_testflight(
       skip_waiting_for_build_processing: true
     )
  end

  desc "Add devices via the command line to the device portal and regenerate the development provisioning profile with the device"
  lane :wt_register_new_device do
    
    ensure_env_vars(
      env_vars: ['APP_STORE_KEY_ID', 'APP_STORE_ISSUER_ID', 'APP_STORE_KEY_BASE64']
    )
    
    app_store_connect_api_key(
      key_id: "#{ENV["APP_STORE_KEY_ID"]}",
      issuer_id: "#{ENV["APP_STORE_ISSUER_ID"]}",
      key_content: "#{ENV["APP_STORE_KEY_BASE64"]}",
      is_key_content_base64: true,
      in_house: false,
    )
    
    device_name = prompt(text: "Enter the device name: ")
    device_udid = prompt(text: "Enter the device UDID: ")
    device_hash = {}
    device_hash[device_name] = device_udid
    register_devices(devices: device_hash)
    match(type:"development", force_for_new_devices: true)
  end
  
  desc "Setup local development environment (WillowTree Internal)"
  lane :wt_setup_build_environment do
    match(type:"development", readonly: true)
  end

  desc "Integrate latest XLIFF files with project"
  lane :xliffimport do
    sh "git pull --no-commit -q origin develop"
    Dir.glob('./../CrowdinImports/*.xliff') do |xliff|
      sh "xcodebuild -importLocalizations -localizationPath #{xliff} -project ./../Vocable.xcodeproj"
    end
  end
  
  desc "Export current XLIFF file from project"
  lane :xliffexport do
    sh "rm -rf ./../CrowdinExport/*"
    sh "xcodebuild -exportLocalizations -localizationPath ./../CrowdinExport/ -project ./../Vocable.xcodeproj"
    sh "mv './../CrowdinExport/en.xcloc/Localized Contents/en.xliff' './../CrowdinExport/en.xliff'"
    sh "rm -rf ./../CrowdinExport/*.xcloc"
  end
  
end
